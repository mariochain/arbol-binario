// Definimos la estructura de un nodo del √°rbol binario
import { TreeNode } from "./parser"; // Aseg√∫rate de importar tu estructura de nodo

// üîπ Recorrido Preorden (Ra√≠z ‚Üí Izquierda ‚Üí Derecha)
export const preOrderTraversal = (node: TreeNode | null, result: string[] = []): string[] => {
    if (!node) return result;
    result.push(node.value); // Visita la ra√≠z
    preOrderTraversal(node.left, result); // Recorre la izquierda
    preOrderTraversal(node.right, result); // Recorre la derecha
    return result;
};

// üîπ Recorrido Inorden (Izquierda ‚Üí Ra√≠z ‚Üí Derecha)
export const inOrderTraversal = (node: TreeNode | null, result: string[] = []): string[] => {
    if (!node) return result;
    inOrderTraversal(node.left, result); // Recorre la izquierda
    result.push(node.value); // Visita la ra√≠z
    inOrderTraversal(node.right, result); // Recorre la derecha
    return result;
};

// üîπ Recorrido Postorden (Izquierda ‚Üí Derecha ‚Üí Ra√≠z)
export const postOrderTraversal = (node: TreeNode | null, result: string[] = []): string[] => {
    if (!node) return result;
    postOrderTraversal(node.left, result); // Recorre la izquierda
    postOrderTraversal(node.right, result); // Recorre la derecha
    result.push(node.value); // Visita la ra√≠z
    return result;
};